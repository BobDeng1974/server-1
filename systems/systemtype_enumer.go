// Code generated by "enumer -type=SystemType -transform=kebab -trimprefix=Sys -json -text -yaml"; DO NOT EDIT.

package systems

import (
	"encoding/json"
	"fmt"
)

const _SystemTypeName = "go-homeloggerbusdevicesecretconfigsecuritytriggerapiuistorage"

var _SystemTypeIndex = [...]uint8{0, 7, 13, 16, 22, 28, 34, 42, 49, 52, 54, 61}

func (i SystemType) String() string {
	if i < 0 || i >= SystemType(len(_SystemTypeIndex)-1) {
		return fmt.Sprintf("SystemType(%d)", i)
	}
	return _SystemTypeName[_SystemTypeIndex[i]:_SystemTypeIndex[i+1]]
}

var _SystemTypeValues = []SystemType{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

var _SystemTypeNameToValueMap = map[string]SystemType{
	_SystemTypeName[0:7]:   0,
	_SystemTypeName[7:13]:  1,
	_SystemTypeName[13:16]: 2,
	_SystemTypeName[16:22]: 3,
	_SystemTypeName[22:28]: 4,
	_SystemTypeName[28:34]: 5,
	_SystemTypeName[34:42]: 6,
	_SystemTypeName[42:49]: 7,
	_SystemTypeName[49:52]: 8,
	_SystemTypeName[52:54]: 9,
	_SystemTypeName[54:61]: 10,
}

// SystemTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SystemTypeString(s string) (SystemType, error) {
	if val, ok := _SystemTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SystemType values", s)
}

// SystemTypeValues returns all values of the enum
func SystemTypeValues() []SystemType {
	return _SystemTypeValues
}

// IsASystemType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SystemType) IsASystemType() bool {
	for _, v := range _SystemTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SystemType
func (i SystemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SystemType
func (i *SystemType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SystemType should be a string, got %s", data)
	}

	var err error
	*i, err = SystemTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SystemType
func (i SystemType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SystemType
func (i *SystemType) UnmarshalText(text []byte) error {
	var err error
	*i, err = SystemTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for SystemType
func (i SystemType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SystemType
func (i *SystemType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SystemTypeString(s)
	return err
}
