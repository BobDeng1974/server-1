// Code generated by "enumer -type=ChannelName -transform=kebab -trimprefix=Ch -text -json -yaml"; DO NOT EDIT.

//
package bus

import (
	"encoding/json"
	"fmt"
)

const _ChannelNameName = "discoverydevice-updates"

var _ChannelNameIndex = [...]uint8{0, 9, 23}

func (i ChannelName) String() string {
	if i < 0 || i >= ChannelName(len(_ChannelNameIndex)-1) {
		return fmt.Sprintf("ChannelName(%d)", i)
	}
	return _ChannelNameName[_ChannelNameIndex[i]:_ChannelNameIndex[i+1]]
}

var _ChannelNameValues = []ChannelName{0, 1}

var _ChannelNameNameToValueMap = map[string]ChannelName{
	_ChannelNameName[0:9]:  0,
	_ChannelNameName[9:23]: 1,
}

// ChannelNameString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ChannelNameString(s string) (ChannelName, error) {
	if val, ok := _ChannelNameNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ChannelName values", s)
}

// ChannelNameValues returns all values of the enum
func ChannelNameValues() []ChannelName {
	return _ChannelNameValues
}

// IsAChannelName returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ChannelName) IsAChannelName() bool {
	for _, v := range _ChannelNameValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ChannelName
func (i ChannelName) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ChannelName
func (i *ChannelName) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ChannelName should be a string, got %s", data)
	}

	var err error
	*i, err = ChannelNameString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ChannelName
func (i ChannelName) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ChannelName
func (i *ChannelName) UnmarshalText(text []byte) error {
	var err error
	*i, err = ChannelNameString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for ChannelName
func (i ChannelName) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ChannelName
func (i *ChannelName) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ChannelNameString(s)
	return err
}
