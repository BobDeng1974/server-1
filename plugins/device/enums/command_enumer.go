// Code generated by "enumer -type=Command -transform=kebab -trimprefix=Cmd -json -text -yaml"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
)

const _CommandName = "onofftoggleset-colorset-sceneset-brightnessset-transition-timepausedockfind-meset-fan-speedtake-picture"

var _CommandIndex = [...]uint8{0, 2, 5, 11, 20, 29, 43, 62, 67, 71, 78, 91, 103}

func (i Command) String() string {
	if i < 0 || i >= Command(len(_CommandIndex)-1) {
		return fmt.Sprintf("Command(%d)", i)
	}
	return _CommandName[_CommandIndex[i]:_CommandIndex[i+1]]
}

var _CommandValues = []Command{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}

var _CommandNameToValueMap = map[string]Command{
	_CommandName[0:2]:    0,
	_CommandName[2:5]:    1,
	_CommandName[5:11]:   2,
	_CommandName[11:20]:  3,
	_CommandName[20:29]:  4,
	_CommandName[29:43]:  5,
	_CommandName[43:62]:  6,
	_CommandName[62:67]:  7,
	_CommandName[67:71]:  8,
	_CommandName[71:78]:  9,
	_CommandName[78:91]:  10,
	_CommandName[91:103]: 11,
}

// CommandString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CommandString(s string) (Command, error) {
	if val, ok := _CommandNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Command values", s)
}

// CommandValues returns all values of the enum
func CommandValues() []Command {
	return _CommandValues
}

// IsACommand returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Command) IsACommand() bool {
	for _, v := range _CommandValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Command
func (i Command) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Command
func (i *Command) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Command should be a string, got %s", data)
	}

	var err error
	*i, err = CommandString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Command
func (i Command) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Command
func (i *Command) UnmarshalText(text []byte) error {
	var err error
	*i, err = CommandString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Command
func (i Command) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Command
func (i *Command) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CommandString(s)
	return err
}
