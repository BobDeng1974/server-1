// Code generated by "enumer -type=SensorType -transform=kebab -trimprefix=Sen -json -text -yaml"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
)

const _SensorTypeName = "genericmotiontemperaturebuttonlock"

var _SensorTypeIndex = [...]uint8{0, 7, 13, 24, 30, 34}

func (i SensorType) String() string {
	if i < 0 || i >= SensorType(len(_SensorTypeIndex)-1) {
		return fmt.Sprintf("SensorType(%d)", i)
	}
	return _SensorTypeName[_SensorTypeIndex[i]:_SensorTypeIndex[i+1]]
}

var _SensorTypeValues = []SensorType{0, 1, 2, 3, 4}

var _SensorTypeNameToValueMap = map[string]SensorType{
	_SensorTypeName[0:7]:   0,
	_SensorTypeName[7:13]:  1,
	_SensorTypeName[13:24]: 2,
	_SensorTypeName[24:30]: 3,
	_SensorTypeName[30:34]: 4,
}

// SensorTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SensorTypeString(s string) (SensorType, error) {
	if val, ok := _SensorTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SensorType values", s)
}

// SensorTypeValues returns all values of the enum
func SensorTypeValues() []SensorType {
	return _SensorTypeValues
}

// IsASensorType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SensorType) IsASensorType() bool {
	for _, v := range _SensorTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SensorType
func (i SensorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SensorType
func (i *SensorType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SensorType should be a string, got %s", data)
	}

	var err error
	*i, err = SensorTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SensorType
func (i SensorType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SensorType
func (i *SensorType) UnmarshalText(text []byte) error {
	var err error
	*i, err = SensorTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for SensorType
func (i SensorType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SensorType
func (i *SensorType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SensorTypeString(s)
	return err
}
