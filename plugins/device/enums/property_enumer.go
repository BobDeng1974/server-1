// Code generated by "enumer -type=Property -transform=snake -trimprefix=Prop -json -text -yaml"; DO NOT EDIT.

//
package enums

import (
	"encoding/json"
	"fmt"
)

const _PropertyName = "inputoncolornum_devicestransition_timebrightnessscenespowertemperaturebattery_levelsunrisesunsethumiditypressurevisibilitywind_directionwind_speedclickdouble_clickpresssensor_typevac_statusareadurationfan_speedpicturedistanceuserdescription"

var _PropertyIndex = [...]uint8{0, 5, 7, 12, 23, 38, 48, 54, 59, 70, 83, 90, 96, 104, 112, 122, 136, 146, 151, 163, 168, 179, 189, 193, 201, 210, 217, 225, 229, 240}

func (i Property) String() string {
	if i < 0 || i >= Property(len(_PropertyIndex)-1) {
		return fmt.Sprintf("Property(%d)", i)
	}
	return _PropertyName[_PropertyIndex[i]:_PropertyIndex[i+1]]
}

var _PropertyValues = []Property{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28}

var _PropertyNameToValueMap = map[string]Property{
	_PropertyName[0:5]:     0,
	_PropertyName[5:7]:     1,
	_PropertyName[7:12]:    2,
	_PropertyName[12:23]:   3,
	_PropertyName[23:38]:   4,
	_PropertyName[38:48]:   5,
	_PropertyName[48:54]:   6,
	_PropertyName[54:59]:   7,
	_PropertyName[59:70]:   8,
	_PropertyName[70:83]:   9,
	_PropertyName[83:90]:   10,
	_PropertyName[90:96]:   11,
	_PropertyName[96:104]:  12,
	_PropertyName[104:112]: 13,
	_PropertyName[112:122]: 14,
	_PropertyName[122:136]: 15,
	_PropertyName[136:146]: 16,
	_PropertyName[146:151]: 17,
	_PropertyName[151:163]: 18,
	_PropertyName[163:168]: 19,
	_PropertyName[168:179]: 20,
	_PropertyName[179:189]: 21,
	_PropertyName[189:193]: 22,
	_PropertyName[193:201]: 23,
	_PropertyName[201:210]: 24,
	_PropertyName[210:217]: 25,
	_PropertyName[217:225]: 26,
	_PropertyName[225:229]: 27,
	_PropertyName[229:240]: 28,
}

// PropertyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PropertyString(s string) (Property, error) {
	if val, ok := _PropertyNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Property values", s)
}

// PropertyValues returns all values of the enum
func PropertyValues() []Property {
	return _PropertyValues
}

// IsAProperty returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Property) IsAProperty() bool {
	for _, v := range _PropertyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Property
func (i Property) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Property
func (i *Property) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Property should be a string, got %s", data)
	}

	var err error
	*i, err = PropertyString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Property
func (i Property) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Property
func (i *Property) UnmarshalText(text []byte) error {
	var err error
	*i, err = PropertyString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Property
func (i Property) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Property
func (i *Property) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = PropertyString(s)
	return err
}
