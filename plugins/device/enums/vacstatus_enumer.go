// Code generated by "enumer -type=VacStatus -transform=snake -trimprefix=Vac -json -text -yaml"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
)

const _VacStatusName = "unknowncleaningpauseddockedchargingfull"

var _VacStatusIndex = [...]uint8{0, 7, 15, 21, 27, 35, 39}

func (i VacStatus) String() string {
	if i < 0 || i >= VacStatus(len(_VacStatusIndex)-1) {
		return fmt.Sprintf("VacStatus(%d)", i)
	}
	return _VacStatusName[_VacStatusIndex[i]:_VacStatusIndex[i+1]]
}

var _VacStatusValues = []VacStatus{0, 1, 2, 3, 4, 5}

var _VacStatusNameToValueMap = map[string]VacStatus{
	_VacStatusName[0:7]:   0,
	_VacStatusName[7:15]:  1,
	_VacStatusName[15:21]: 2,
	_VacStatusName[21:27]: 3,
	_VacStatusName[27:35]: 4,
	_VacStatusName[35:39]: 5,
}

// VacStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VacStatusString(s string) (VacStatus, error) {
	if val, ok := _VacStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to VacStatus values", s)
}

// VacStatusValues returns all values of the enum
func VacStatusValues() []VacStatus {
	return _VacStatusValues
}

// IsAVacStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i VacStatus) IsAVacStatus() bool {
	for _, v := range _VacStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for VacStatus
func (i VacStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for VacStatus
func (i *VacStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("VacStatus should be a string, got %s", data)
	}

	var err error
	*i, err = VacStatusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for VacStatus
func (i VacStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for VacStatus
func (i *VacStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = VacStatusString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for VacStatus
func (i VacStatus) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for VacStatus
func (i *VacStatus) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = VacStatusString(s)
	return err
}
