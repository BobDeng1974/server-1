// Code generated by "enumer -type=SecSystem -transform=kebab -trimprefix=SecSystem -json -text -yaml"; DO NOT EDIT.

//
package providers

import (
	"encoding/json"
	"fmt"
)

const _SecSystemName = "alldevicecore"

var _SecSystemIndex = [...]uint8{0, 3, 9, 13}

func (i SecSystem) String() string {
	if i < 0 || i >= SecSystem(len(_SecSystemIndex)-1) {
		return fmt.Sprintf("SecSystem(%d)", i)
	}
	return _SecSystemName[_SecSystemIndex[i]:_SecSystemIndex[i+1]]
}

var _SecSystemValues = []SecSystem{0, 1, 2}

var _SecSystemNameToValueMap = map[string]SecSystem{
	_SecSystemName[0:3]:  0,
	_SecSystemName[3:9]:  1,
	_SecSystemName[9:13]: 2,
}

// SecSystemString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SecSystemString(s string) (SecSystem, error) {
	if val, ok := _SecSystemNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SecSystem values", s)
}

// SecSystemValues returns all values of the enum
func SecSystemValues() []SecSystem {
	return _SecSystemValues
}

// IsASecSystem returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SecSystem) IsASecSystem() bool {
	for _, v := range _SecSystemValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SecSystem
func (i SecSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SecSystem
func (i *SecSystem) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SecSystem should be a string, got %s", data)
	}

	var err error
	*i, err = SecSystemString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SecSystem
func (i SecSystem) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SecSystem
func (i *SecSystem) UnmarshalText(text []byte) error {
	var err error
	*i, err = SecSystemString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for SecSystem
func (i SecSystem) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SecSystem
func (i *SecSystem) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SecSystemString(s)
	return err
}
