// Code generated by "enumer -type=SecVerb -transform=kebab -trimprefix=SecVerb -json -text -yaml"; DO NOT EDIT.

//
package providers

import (
	"encoding/json"
	"fmt"
)

const _SecVerbName = "allgetcommandhistory"

var _SecVerbIndex = [...]uint8{0, 3, 6, 13, 20}

func (i SecVerb) String() string {
	if i < 0 || i >= SecVerb(len(_SecVerbIndex)-1) {
		return fmt.Sprintf("SecVerb(%d)", i)
	}
	return _SecVerbName[_SecVerbIndex[i]:_SecVerbIndex[i+1]]
}

var _SecVerbValues = []SecVerb{0, 1, 2, 3}

var _SecVerbNameToValueMap = map[string]SecVerb{
	_SecVerbName[0:3]:   0,
	_SecVerbName[3:6]:   1,
	_SecVerbName[6:13]:  2,
	_SecVerbName[13:20]: 3,
}

// SecVerbString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SecVerbString(s string) (SecVerb, error) {
	if val, ok := _SecVerbNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SecVerb values", s)
}

// SecVerbValues returns all values of the enum
func SecVerbValues() []SecVerb {
	return _SecVerbValues
}

// IsASecVerb returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SecVerb) IsASecVerb() bool {
	for _, v := range _SecVerbValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SecVerb
func (i SecVerb) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SecVerb
func (i *SecVerb) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SecVerb should be a string, got %s", data)
	}

	var err error
	*i, err = SecVerbString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SecVerb
func (i SecVerb) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SecVerb
func (i *SecVerb) UnmarshalText(text []byte) error {
	var err error
	*i, err = SecVerbString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for SecVerb
func (i SecVerb) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SecVerb
func (i *SecVerb) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SecVerbString(s)
	return err
}
