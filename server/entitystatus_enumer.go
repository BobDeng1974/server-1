// Code generated by "enumer -type=entityStatus -transform=snake -trimprefix=entity -json -text -yaml"; DO NOT EDIT.

package server

import (
	"encoding/json"
	"fmt"
)

const _entityStatusName = "assignment_failedassignedwrong_workerloadedload_failed"

var _entityStatusIndex = [...]uint8{0, 17, 25, 37, 43, 54}

func (i entityStatus) String() string {
	if i < 0 || i >= entityStatus(len(_entityStatusIndex)-1) {
		return fmt.Sprintf("entityStatus(%d)", i)
	}
	return _entityStatusName[_entityStatusIndex[i]:_entityStatusIndex[i+1]]
}

var _entityStatusValues = []entityStatus{0, 1, 2, 3, 4}

var _entityStatusNameToValueMap = map[string]entityStatus{
	_entityStatusName[0:17]:  0,
	_entityStatusName[17:25]: 1,
	_entityStatusName[25:37]: 2,
	_entityStatusName[37:43]: 3,
	_entityStatusName[43:54]: 4,
}

// entityStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func entityStatusString(s string) (entityStatus, error) {
	if val, ok := _entityStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to entityStatus values", s)
}

// entityStatusValues returns all values of the enum
func entityStatusValues() []entityStatus {
	return _entityStatusValues
}

// IsAentityStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i entityStatus) IsAentityStatus() bool {
	for _, v := range _entityStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for entityStatus
func (i entityStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for entityStatus
func (i *entityStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("entityStatus should be a string, got %s", data)
	}

	var err error
	*i, err = entityStatusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for entityStatus
func (i entityStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for entityStatus
func (i *entityStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = entityStatusString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for entityStatus
func (i entityStatus) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for entityStatus
func (i *entityStatus) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = entityStatusString(s)
	return err
}
